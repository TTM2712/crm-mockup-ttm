{"version":3,"file":"static/js/953.55e3eb4c.chunk.js","mappings":"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","sources":["pages/Contact/components/ContactList/index.tsx","pages/Contact/components/ContactDetails/index.tsx","pages/Contact/components/CreateContactForm/index.tsx","pages/Contact/components/EmailWindow/index.tsx","pages/Contact/components/NoteDialog/index.tsx","pages/Contact/index.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Box,\n  Checkbox,\n  Chip,\n  IconButton,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n  TextField,\n  Typography,\n  InputAdornment,\n  Button,\n  Avatar,\n  Tooltip\n} from '@mui/material';\nimport {\n  Add as AddIcon,\n  Search as SearchIcon,\n  FilterList as FilterListIcon,\n  MoreVert as MoreVertIcon,\n  Edit as EditIcon,\n  Delete as DeleteIcon\n} from '@mui/icons-material';\n\ninterface Contact {\n  id: number;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  owner: string;\n  createDate: string;\n  leadStatus: string;\n}\n\ninterface ContactListProps {\n  contacts: Contact[];\n  searchTerm: string;\n  page: number;\n  rowsPerPage: number;\n  selectedContacts: number[];\n  onSearchChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  onChangePage: (event: unknown, newPage: number) => void;\n  onChangeRowsPerPage: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  onSelectAllClick: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  onCheckboxClick: (id: number) => void;\n  onOpenCreateDialog: () => void;\n  onOpenContactDrawer: (contact: Contact) => void;\n  getInitials: (firstName: string, lastName: string) => string;\n  isSelected: (id: number) => boolean;\n}\n\nconst columns = [\n  { id: 'name', label: 'Name', minWidth: 170 },\n  { id: 'email', label: 'Email', minWidth: 170 },\n  { id: 'phone', label: 'Phone Number', minWidth: 120 },\n  { id: 'owner', label: 'Contact Owner', minWidth: 120 },\n  { id: 'createDate', label: 'Create Date', minWidth: 100 },\n  { id: 'leadStatus', label: 'Lead Status', minWidth: 100 },\n  { id: 'actions', label: 'Actions', minWidth: 80 },\n];\n\nconst ContactList: React.FC<ContactListProps> = ({\n  contacts,\n  searchTerm,\n  page,\n  rowsPerPage,\n  selectedContacts,\n  onSearchChange,\n  onChangePage,\n  onChangeRowsPerPage,\n  onSelectAllClick,\n  onCheckboxClick,\n  onOpenCreateDialog,\n  onOpenContactDrawer,\n  getInitials,\n  isSelected\n}) => {\n  // Filter contacts based on search term\n  const filteredContacts = contacts.filter(contact => \n    contact.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    contact.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    contact.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    contact.phone.includes(searchTerm)\n  );\n\n  return (\n    <Paper sx={{ width: '100%', overflow: 'hidden' }}>\n      <Box p={2} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Typography variant=\"h6\" component=\"div\">\n          Contacts\n          <Typography component=\"span\" color=\"text.secondary\" sx={{ ml: 1 }}>\n            ({filteredContacts.length})\n          </Typography>\n        </Typography>\n        <Box display=\"flex\" gap={1}>\n          <Button \n            variant=\"contained\" \n            startIcon={<AddIcon />}\n            onClick={onOpenCreateDialog}\n          >\n            Create Contact\n          </Button>\n        </Box>\n      </Box>\n      \n      <Box px={2} pb={2} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n        <TextField\n          placeholder=\"Search contacts...\"\n          size=\"small\"\n          value={searchTerm}\n          onChange={onSearchChange}\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <SearchIcon />\n              </InputAdornment>\n            ),\n          }}\n          sx={{ width: 300 }}\n        />\n        <IconButton>\n          <FilterListIcon />\n        </IconButton>\n      </Box>\n      \n      <TableContainer sx={{ maxHeight: 'calc(100vh - 280px)' }}>\n        <Table stickyHeader>\n          <TableHead>\n            <TableRow>\n              <TableCell padding=\"checkbox\">\n                <Checkbox\n                  indeterminate={selectedContacts.length > 0 && selectedContacts.length < filteredContacts.length}\n                  checked={filteredContacts.length > 0 && selectedContacts.length === filteredContacts.length}\n                  onChange={onSelectAllClick}\n                />\n              </TableCell>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  style={{ minWidth: column.minWidth }}\n                  sx={{ fontWeight: 'bold' }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {filteredContacts\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              .map((contact) => {\n                const isItemSelected = isSelected(contact.id);\n                \n                return (\n                  <TableRow\n                    hover\n                    role=\"checkbox\"\n                    tabIndex={-1}\n                    key={contact.id}\n                    selected={isItemSelected}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        checked={isItemSelected}\n                        onClick={() => onCheckboxClick(contact.id)}\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Box display=\"flex\" alignItems=\"center\" sx={{ cursor: 'pointer' }} onClick={() => onOpenContactDrawer(contact)}>\n                        <Avatar sx={{ mr: 2, bgcolor: 'primary.main' }}>\n                          {getInitials(contact.firstName, contact.lastName)}\n                        </Avatar>\n                        <Typography>\n                          {contact.firstName} {contact.lastName}\n                        </Typography>\n                      </Box>\n                    </TableCell>\n                    <TableCell>{contact.email}</TableCell>\n                    <TableCell>{contact.phone}</TableCell>\n                    <TableCell>{contact.owner}</TableCell>\n                    <TableCell>{contact.createDate}</TableCell>\n                    <TableCell>\n                      <Chip \n                        label={contact.leadStatus} \n                        color={\n                          contact.leadStatus === 'New' ? 'primary' : \n                          contact.leadStatus === 'Qualified' ? 'success' : \n                          'warning'\n                        } \n                        size=\"small\" \n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Box display=\"flex\">\n                        <Tooltip title=\"Edit\">\n                          <IconButton size=\"small\">\n                            <EditIcon fontSize=\"small\" />\n                          </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Delete\">\n                          <IconButton size=\"small\">\n                            <DeleteIcon fontSize=\"small\" />\n                          </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"More\">\n                          <IconButton size=\"small\">\n                            <MoreVertIcon fontSize=\"small\" />\n                          </IconButton>\n                        </Tooltip>\n                      </Box>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={filteredContacts.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onPageChange={onChangePage}\n        onRowsPerPageChange={onChangeRowsPerPage}\n      />\n    </Paper>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\nimport {\n  Box,\n  Typography,\n  IconButton,\n  Divider,\n  Chip,\n  Card,\n  CardContent,\n  Tooltip\n} from '@mui/material';\nimport {\n  Close as CloseIcon,\n  Email as EmailIcon,\n  Phone as PhoneIcon,\n  Note as NoteIcon,\n  Event as EventIcon,\n  Assignment as TaskIcon,\n  ExpandMore as ExpandMoreIcon\n} from '@mui/icons-material';\n\ninterface Contact {\n  id: number;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  owner: string;\n  createDate: string;\n  leadStatus: string;\n}\n\ninterface ContactDetailsProps {\n  contact: Contact;\n  onClose: () => void;\n  onOpenEmailWindow: () => void;\n  onOpenNoteDialog: () => void;\n}\n\nconst ContactDetails: React.FC<ContactDetailsProps> = ({\n  contact,\n  onClose,\n  onOpenEmailWindow,\n  onOpenNoteDialog\n}) => {\n  return (\n    <Box>\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n        <Typography variant=\"h6\">Contact Details</Typography>\n        <IconButton onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      </Box>\n\n      <Box mb={3}>\n        <Typography variant=\"h5\" fontWeight=\"bold\">\n          {contact.firstName} {contact.lastName}\n        </Typography>\n        <Typography color=\"text.secondary\" sx={{ mb: 1 }}>\n          {contact.email}\n        </Typography>\n        <Box display=\"flex\" gap={1} mt={2}>\n          <Tooltip title=\"Add Note\">\n            <IconButton color=\"primary\" onClick={onOpenNoteDialog}>\n              <NoteIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Send Email\">\n            <IconButton color=\"primary\" onClick={onOpenEmailWindow}>\n              <EmailIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Call\">\n            <IconButton color=\"primary\">\n              <PhoneIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Schedule\">\n            <IconButton color=\"primary\">\n              <EventIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Create Task\">\n            <IconButton color=\"primary\">\n              <TaskIcon />\n            </IconButton>\n          </Tooltip>\n        </Box>\n      </Box>\n\n      <Divider sx={{ my: 2 }} />\n      \n      <Card variant=\"outlined\" sx={{ mb: 2 }}>\n        <CardContent>\n          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n            <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n              About this contact\n            </Typography>\n            <ExpandMoreIcon />\n          </Box>\n          <Box mt={2} sx={{ display: 'flex', flexWrap: 'wrap', gap: 2 }}>\n            <Box sx={{ flex: '1 1 calc(50% - 8px)' }}>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Phone\n              </Typography>\n              <Typography variant=\"body1\">\n                {contact.phone}\n              </Typography>\n            </Box>\n            <Box sx={{ flex: '1 1 calc(50% - 8px)' }}>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Lead Status\n              </Typography>\n              <Chip \n                label={contact.leadStatus} \n                color={\n                  contact.leadStatus === 'New' ? 'primary' : \n                  contact.leadStatus === 'Qualified' ? 'success' : \n                  'warning'\n                } \n                size=\"small\" \n              />\n            </Box>\n            <Box sx={{ flex: '1 1 calc(50% - 8px)' }}>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Owner\n              </Typography>\n              <Typography variant=\"body1\">\n                {contact.owner}\n              </Typography>\n            </Box>\n            <Box sx={{ flex: '1 1 calc(50% - 8px)' }}>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Created\n              </Typography>\n              <Typography variant=\"body1\">\n                {contact.createDate}\n              </Typography>\n            </Box>\n          </Box>\n        </CardContent>\n      </Card>\n\n      <Card variant=\"outlined\">\n        <CardContent>\n          <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n            Activity Timeline\n          </Typography>\n          <Box mt={2} display=\"flex\" justifyContent=\"center\" alignItems=\"center\" height={100}>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              No activities yet\n            </Typography>\n          </Box>\n        </CardContent>\n      </Card>\n    </Box>\n  );\n};\n\nexport default ContactDetails;\n","import React from 'react';\nimport {\n  Box,\n  Button,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  IconButton\n} from '@mui/material';\nimport {\n  Close as CloseIcon\n} from '@mui/icons-material';\n\ninterface CreateContactFormProps {\n  newContact: {\n    firstName: string;\n    lastName: string;\n    email: string;\n    phone: string;\n    jobTitle: string;\n    leadStatus: string;\n  };\n  onClose: () => void;\n  onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;\n  onLeadStatusChange: (event: any) => void;\n  onSubmit: () => void;\n}\n\nconst CreateContactForm: React.FC<CreateContactFormProps> = ({\n  newContact,\n  onClose,\n  onChange,\n  onLeadStatusChange,\n  onSubmit\n}) => {\n  return (\n    <>\n      <DialogTitle>\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n          Create New Contact\n          <IconButton onClick={onClose} size=\"small\">\n            <CloseIcon />\n          </IconButton>\n        </Box>\n      </DialogTitle>\n      <DialogContent>\n        <Box sx={{ mt: 1, display: 'flex', flexWrap: 'wrap', gap: 2 }}>\n          <Box sx={{ flex: '1 1 calc(50% - 8px)' }}>\n            <TextField\n              name=\"firstName\"\n              label=\"First Name\"\n              fullWidth\n              required\n              value={newContact.firstName}\n              onChange={onChange}\n              autoFocus\n            />\n          </Box>\n          <Box sx={{ flex: '1 1 calc(50% - 8px)' }}>\n            <TextField\n              name=\"lastName\"\n              label=\"Last Name\"\n              fullWidth\n              value={newContact.lastName}\n              onChange={onChange}\n            />\n          </Box>\n          <Box sx={{ width: '100%', mt: 2 }}>\n            <TextField\n              name=\"email\"\n              label=\"Email\"\n              type=\"email\"\n              fullWidth\n              required\n              value={newContact.email}\n              onChange={onChange}\n            />\n          </Box>\n          <Box sx={{ width: '100%', mt: 2 }}>\n            <TextField\n              name=\"phone\"\n              label=\"Phone Number\"\n              fullWidth\n              value={newContact.phone}\n              onChange={onChange}\n            />\n          </Box>\n          <Box sx={{ width: '100%', mt: 2 }}>\n            <TextField\n              name=\"jobTitle\"\n              label=\"Job Title\"\n              fullWidth\n              value={newContact.jobTitle}\n              onChange={onChange}\n            />\n          </Box>\n          <Box sx={{ width: '100%', mt: 2 }}>\n            <FormControl fullWidth>\n              <InputLabel>Lead Status</InputLabel>\n              <Select\n                value={newContact.leadStatus}\n                label=\"Lead Status\"\n                onChange={onLeadStatusChange}\n              >\n                <MenuItem value=\"New\">New</MenuItem>\n                <MenuItem value=\"Contacted\">Contacted</MenuItem>\n                <MenuItem value=\"Qualified\">Qualified</MenuItem>\n                <MenuItem value=\"Lost\">Lost</MenuItem>\n              </Select>\n            </FormControl>\n          </Box>\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button onClick={onSubmit} variant=\"contained\" color=\"primary\">\n          Save\n        </Button>\n      </DialogActions>\n    </>\n  );\n};\n\nexport default CreateContactForm;\n","import React, { useState, useRef, useEffect } from 'react';\nimport {\n  Box,\n  Button,\n  TextField,\n  Typography,\n  IconButton,\n  Paper,\n  Divider,\n  Menu,\n  MenuItem,\n  Tooltip\n} from '@mui/material';\nimport {\n  Close as CloseIcon,\n  Minimize as MinimizeIcon,\n  OpenInFull as MaximizeIcon,\n  ExpandMore as ExpandMoreIcon,\n  Schedule as ScheduleIcon\n} from '@mui/icons-material';\n\ninterface EmailWindowProps {\n  open: boolean;\n  onClose: () => void;\n  recipientEmail?: string;\n}\n\nconst EmailWindow: React.FC<EmailWindowProps> = ({ open, onClose, recipientEmail = '' }) => {\n  const [position, setPosition] = useState({ x: 100, y: 100 });\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\n  const [isMinimized, setIsMinimized] = useState(false);\n  const [isMaximized, setIsMaximized] = useState(false);\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const windowRef = useRef<HTMLDivElement>(null);\n\n  // Handle drag start\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (isMaximized) return;\n    \n    if (windowRef.current && e.target === e.currentTarget) {\n      setIsDragging(true);\n      const rect = windowRef.current.getBoundingClientRect();\n      setDragOffset({\n        x: e.clientX - rect.left,\n        y: e.clientY - rect.top\n      });\n    }\n  };\n\n  // Handle dragging\n  useEffect(() => {\n    const handleMouseMove = (e: MouseEvent) => {\n      if (isDragging && !isMaximized) {\n        setPosition({\n          x: e.clientX - dragOffset.x,\n          y: e.clientY - dragOffset.y\n        });\n      }\n    };\n\n    const handleMouseUp = () => {\n      setIsDragging(false);\n    };\n\n    if (isDragging) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    }\n\n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [isDragging, dragOffset, isMaximized]);\n\n  // Handle window controls\n  const handleMinimize = () => {\n    setIsMinimized(!isMinimized);\n  };\n\n  const handleMaximize = () => {\n    setIsMaximized(!isMaximized);\n  };\n\n  // Handle send dropdown menu\n  const handleSendClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleSendMenuClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleSendNow = () => {\n    // Logic to send email now\n    handleSendMenuClose();\n  };\n\n  const handleSendLater = () => {\n    // Logic to schedule email\n    handleSendMenuClose();\n  };\n\n  if (!open) return null;\n\n  return (\n    <Paper\n      ref={windowRef}\n      sx={{\n        position: 'fixed',\n        top: isMaximized ? 0 : position.y,\n        left: isMaximized ? 0 : position.x,\n        width: isMaximized ? '100%' : 600,\n        height: isMaximized ? '100%' : isMinimized ? 40 : 500,\n        zIndex: 1300,\n        overflow: 'hidden',\n        boxShadow: '0 4px 20px rgba(0,0,0,0.15)',\n        borderRadius: '8px',\n        display: 'flex',\n        flexDirection: 'column',\n        transition: 'height 0.2s ease-in-out'\n      }}\n    >\n      {/* Window header/title bar */}\n      <Box\n        sx={{\n          bgcolor: '#f0f0f0',\n          p: 1,\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          cursor: 'move',\n          userSelect: 'none',\n          borderBottom: '1px solid #ddd'\n        }}\n        onMouseDown={handleMouseDown}\n      >\n        <Typography variant=\"subtitle1\" fontWeight=\"medium\">\n          New Email\n        </Typography>\n        <Box>\n          <IconButton size=\"small\" onClick={handleMinimize}>\n            <MinimizeIcon fontSize=\"small\" />\n          </IconButton>\n          <IconButton size=\"small\" onClick={handleMaximize}>\n            <MaximizeIcon fontSize=\"small\" />\n          </IconButton>\n          <IconButton size=\"small\" onClick={onClose}>\n            <CloseIcon fontSize=\"small\" />\n          </IconButton>\n        </Box>\n      </Box>\n\n      {/* Email content */}\n      {!isMinimized && (\n        <Box sx={{ p: 2, flexGrow: 1, display: 'flex', flexDirection: 'column', overflow: 'auto' }}>\n          <TextField\n            label=\"To\"\n            fullWidth\n            value={recipientEmail}\n            margin=\"dense\"\n            size=\"small\"\n          />\n          <TextField\n            label=\"From\"\n            fullWidth\n            value=\"your.email@example.com\"\n            margin=\"dense\"\n            size=\"small\"\n            InputProps={{\n              readOnly: true,\n            }}\n          />\n          <TextField\n            label=\"Subject\"\n            fullWidth\n            margin=\"dense\"\n            size=\"small\"\n          />\n          <Divider sx={{ my: 2 }} />\n          <TextField\n            label=\"Message\"\n            multiline\n            rows={isMaximized ? 20 : 12}\n            fullWidth\n            sx={{ flexGrow: 1 }}\n          />\n          \n          <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>\n            <Button variant=\"outlined\" sx={{ mr: 1 }}>\n              Cancel\n            </Button>\n            <Box>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                endIcon={<ExpandMoreIcon />}\n                onClick={handleSendClick}\n              >\n                Send\n              </Button>\n              <Menu\n                anchorEl={anchorEl}\n                open={Boolean(anchorEl)}\n                onClose={handleSendMenuClose}\n              >\n                <MenuItem onClick={handleSendNow}>Send now</MenuItem>\n                <MenuItem onClick={handleSendLater}>\n                  <ScheduleIcon fontSize=\"small\" sx={{ mr: 1 }} />\n                  Send later\n                </MenuItem>\n              </Menu>\n            </Box>\n          </Box>\n        </Box>\n      )}\n    </Paper>\n  );\n};\n\nexport default EmailWindow;\n","import React from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  Box,\n  IconButton\n} from '@mui/material';\nimport {\n  Close as CloseIcon\n} from '@mui/icons-material';\n\ninterface NoteDialogProps {\n  open: boolean;\n  onClose: () => void;\n}\n\nconst NoteDialog: React.FC<NoteDialogProps> = ({ open, onClose }) => {\n  return (\n    <Dialog \n      open={open} \n      onClose={onClose}\n      fullWidth\n      maxWidth=\"sm\"\n    >\n      <DialogTitle>\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n          Add Note\n          <IconButton onClick={onClose} size=\"small\">\n            <CloseIcon />\n          </IconButton>\n        </Box>\n      </DialogTitle>\n      <DialogContent>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          id=\"note\"\n          label=\"Note\"\n          multiline\n          rows={4}\n          fullWidth\n          variant=\"outlined\"\n        />\n        <Button\n          variant=\"outlined\"\n          component=\"label\"\n          sx={{ mt: 2 }}\n        >\n          Attach File\n          <input\n            type=\"file\"\n            hidden\n          />\n        </Button>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button onClick={onClose} variant=\"contained\" color=\"primary\">\n          Save\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default NoteDialog;\n","import React, { useState } from 'react';\nimport {\n  Box,\n  Button,\n  Dialog,\n  Drawer,\n  Typography\n} from '@mui/material';\nimport {\n  FileUpload as FileUploadIcon\n} from '@mui/icons-material';\n\n// Import custom components\nimport ContactList from './components/ContactList';\nimport ContactDetails from './components/ContactDetails';\nimport CreateContactForm from './components/CreateContactForm';\nimport EmailWindow from './components/EmailWindow';\nimport NoteDialog from './components/NoteDialog';\n\n// Mock data for contacts\nconst mockContacts = [\n  {\n    id: 1,\n    firstName: 'Nguyễn',\n    lastName: 'Văn A',\n    email: 'nguyenvana@example.com',\n    phone: '0901234567',\n    owner: 'Admin User',\n    createDate: '2023-07-15',\n    leadStatus: 'New'\n  },\n  {\n    id: 2,\n    firstName: 'Trần',\n    lastName: 'Thị B',\n    email: 'tranthib@example.com',\n    phone: '0912345678',\n    owner: 'Sales Rep',\n    createDate: '2023-07-10',\n    leadStatus: 'Qualified'\n  },\n  {\n    id: 3,\n    firstName: 'Lê',\n    lastName: 'Văn C',\n    email: 'levanc@example.com',\n    phone: '0923456789',\n    owner: 'Admin User',\n    createDate: '2023-07-05',\n    leadStatus: 'Contacted'\n  },\n  {\n    id: 4,\n    firstName: 'Phạm',\n    lastName: 'Thị D',\n    email: 'phamthid@example.com',\n    phone: '0934567890',\n    owner: 'Sales Rep',\n    createDate: '2023-06-30',\n    leadStatus: 'New'\n  },\n  {\n    id: 5,\n    firstName: 'Hoàng',\n    lastName: 'Văn E',\n    email: 'hoangvane@example.com',\n    phone: '0945678901',\n    owner: 'Admin User',\n    createDate: '2023-06-25',\n    leadStatus: 'Qualified'\n  },\n];\n\n// Column definitions\nconst columns = [\n  { id: 'name', label: 'Name', minWidth: 170 },\n  { id: 'email', label: 'Email', minWidth: 170 },\n  { id: 'phone', label: 'Phone Number', minWidth: 120 },\n  { id: 'owner', label: 'Contact Owner', minWidth: 120 },\n  { id: 'createDate', label: 'Create Date', minWidth: 100 },\n  { id: 'leadStatus', label: 'Lead Status', minWidth: 100 },\n  { id: 'actions', label: 'Actions', minWidth: 80 },\n];\n\nconst ContactManagement: React.FC = () => {\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedContacts, setSelectedContacts] = useState<number[]>([]);\n  const [openCreateDialog, setOpenCreateDialog] = useState(false);\n  const [openContactDrawer, setOpenContactDrawer] = useState(false);\n  const [selectedContact, setSelectedContact] = useState<any>(null);\n  const [openNoteDialog, setOpenNoteDialog] = useState(false);\n  const [openEmailWindow, setOpenEmailWindow] = useState(false);\n  const [newContact, setNewContact] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    jobTitle: '',\n    leadStatus: 'New'\n  });\n\n  // Handle pagination\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  // Handle search\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(event.target.value);\n    setPage(0);\n  };\n\n  // Handle checkbox selection\n  const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.checked) {\n      const newSelected = filteredContacts.map((n) => n.id);\n      setSelectedContacts(newSelected);\n      return;\n    }\n    setSelectedContacts([]);\n  };\n\n  const handleCheckboxClick = (id: number) => {\n    const selectedIndex = selectedContacts.indexOf(id);\n    let newSelected: number[] = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selectedContacts, id);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selectedContacts.slice(1));\n    } else if (selectedIndex === selectedContacts.length - 1) {\n      newSelected = newSelected.concat(selectedContacts.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selectedContacts.slice(0, selectedIndex),\n        selectedContacts.slice(selectedIndex + 1),\n      );\n    }\n\n    setSelectedContacts(newSelected);\n  };\n\n  const isSelected = (id: number) => selectedContacts.indexOf(id) !== -1;\n\n  // Handle create contact dialog\n  const handleOpenCreateDialog = () => {\n    setOpenCreateDialog(true);\n  };\n\n  const handleCloseCreateDialog = () => {\n    setOpenCreateDialog(false);\n    setNewContact({\n      firstName: '',\n      lastName: '',\n      email: '',\n      phone: '',\n      jobTitle: '',\n      leadStatus: 'New'\n    });\n  };\n\n  const handleCreateContactChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setNewContact({\n      ...newContact,\n      [name]: value\n    });\n  };\n\n  const handleLeadStatusChange = (event: any) => {\n    setNewContact({\n      ...newContact,\n      leadStatus: event.target.value\n    });\n  };\n\n  const handleCreateContact = () => {\n    // In a real app, this would send data to an API\n    console.log('Creating contact:', newContact);\n    handleCloseCreateDialog();\n    // Show success notification (would use a proper notification system in a real app)\n    alert('✅ Contact created successfully!');\n  };\n\n  // Handle contact drawer\n  const handleOpenContactDrawer = (contact: any) => {\n    setSelectedContact(contact);\n    setOpenContactDrawer(true);\n  };\n\n  const handleCloseContactDrawer = () => {\n    setOpenContactDrawer(false);\n  };\n\n  // Handle note dialog\n  const handleOpenNoteDialog = () => {\n    setOpenNoteDialog(true);\n  };\n\n  const handleCloseNoteDialog = () => {\n    setOpenNoteDialog(false);\n  };\n\n  // Handle email window\n  const handleOpenEmailWindow = () => {\n    setOpenEmailWindow(true);\n  };\n\n  const handleCloseEmailWindow = () => {\n    setOpenEmailWindow(false);\n  };\n\n  // Filter contacts based on search term\n  const filteredContacts = mockContacts.filter((contact) => {\n    const fullName = `${contact.firstName} ${contact.lastName}`.toLowerCase();\n    return (\n      fullName.includes(searchTerm.toLowerCase()) ||\n      contact.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      contact.phone.includes(searchTerm)\n    );\n  });\n\n  // Get initials for avatar\n  const getInitials = (firstName: string, lastName: string) => {\n    return `${firstName.charAt(0)}${lastName.charAt(0)}`;\n  };\n\n  return (\n    <Box sx={{ p: 3 }}>\n      {/* Contact List */}\n      <ContactList\n        contacts={mockContacts}\n        searchTerm={searchTerm}\n        page={page}\n        rowsPerPage={rowsPerPage}\n        selectedContacts={selectedContacts}\n        onSearchChange={handleSearchChange}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n        onSelectAllClick={handleSelectAllClick}\n        onCheckboxClick={handleCheckboxClick}\n        onOpenCreateDialog={handleOpenCreateDialog}\n        onOpenContactDrawer={handleOpenContactDrawer}\n        getInitials={getInitials}\n        isSelected={isSelected}\n      />\n\n      {/* Create Contact Dialog */}\n      <Dialog\n        open={openCreateDialog}\n        onClose={handleCloseCreateDialog}\n        fullWidth\n        maxWidth=\"sm\"\n      >\n        <CreateContactForm\n          newContact={newContact}\n          onClose={handleCloseCreateDialog}\n          onChange={handleCreateContactChange}\n          onLeadStatusChange={handleLeadStatusChange}\n          onSubmit={handleCreateContact}\n        />\n      </Dialog>\n\n      {/* Contact Preview Drawer */}\n      <Drawer\n        anchor=\"right\"\n        open={openContactDrawer}\n        onClose={handleCloseContactDrawer}\n        sx={{\n          '& .MuiDrawer-paper': { \n            width: { xs: '100%', sm: 400 },\n            p: 2\n          },\n        }}\n      >\n        {selectedContact && (\n          <ContactDetails\n            contact={selectedContact}\n            onClose={handleCloseContactDrawer}\n            onOpenEmailWindow={handleOpenEmailWindow}\n            onOpenNoteDialog={handleOpenNoteDialog}\n          />\n        )}\n      </Drawer>\n\n      {/* Note Dialog */}\n      <NoteDialog \n        open={openNoteDialog} \n        onClose={handleCloseNoteDialog}\n      />\n\n      {/* Email Window (Draggable) */}\n      <EmailWindow\n        open={openEmailWindow}\n        onClose={handleCloseEmailWindow}\n        recipientEmail={selectedContact?.email || ''}\n      />\n    </Box>\n  );\n};\n\nexport default ContactManagement;\n"],"names":["columns","id","label","minWidth","_ref","contacts","searchTerm","page","rowsPerPage","selectedContacts","onSearchChange","onChangePage","onChangeRowsPerPage","onSelectAllClick","onCheckboxClick","onOpenCreateDialog","onOpenContactDrawer","getInitials","isSelected","filteredContacts","filter","contact","firstName","toLowerCase","includes","lastName","email","phone","_jsxs","Paper","sx","width","overflow","children","Box","p","display","justifyContent","alignItems","Typography","variant","component","color","ml","length","_jsx","gap","Button","startIcon","AddIcon","onClick","px","pb","TextField","placeholder","size","value","onChange","InputProps","startAdornment","InputAdornment","position","SearchIcon","IconButton","FilterListIcon","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableRow","TableCell","padding","Checkbox","indeterminate","checked","map","column","style","fontWeight","TableBody","slice","isItemSelected","hover","role","tabIndex","selected","cursor","Avatar","mr","bgcolor","owner","createDate","Chip","leadStatus","Tooltip","title","EditIcon","fontSize","DeleteIcon","MoreVertIcon","TablePagination","rowsPerPageOptions","count","onPageChange","onRowsPerPageChange","onClose","onOpenEmailWindow","onOpenNoteDialog","mb","CloseIcon","mt","NoteIcon","EmailIcon","PhoneIcon","EventIcon","TaskIcon","Divider","my","Card","CardContent","ExpandMoreIcon","flexWrap","flex","height","newContact","onLeadStatusChange","onSubmit","_Fragment","DialogTitle","DialogContent","name","fullWidth","required","autoFocus","type","jobTitle","FormControl","InputLabel","Select","MenuItem","DialogActions","open","recipientEmail","setPosition","useState","x","y","isDragging","setIsDragging","dragOffset","setDragOffset","isMinimized","setIsMinimized","isMaximized","setIsMaximized","anchorEl","setAnchorEl","windowRef","useRef","useEffect","handleMouseMove","e","clientX","clientY","handleMouseUp","document","addEventListener","removeEventListener","handleSendMenuClose","ref","top","left","zIndex","boxShadow","borderRadius","flexDirection","transition","userSelect","borderBottom","onMouseDown","current","target","currentTarget","rect","getBoundingClientRect","handleMinimize","MinimizeIcon","handleMaximize","MaximizeIcon","flexGrow","margin","readOnly","multiline","rows","endIcon","event","Menu","Boolean","handleSendNow","handleSendLater","ScheduleIcon","Dialog","maxWidth","hidden","mockContacts","ContactManagement","setPage","setRowsPerPage","setSearchTerm","setSelectedContacts","openCreateDialog","setOpenCreateDialog","openContactDrawer","setOpenContactDrawer","selectedContact","setSelectedContact","openNoteDialog","setOpenNoteDialog","openEmailWindow","setOpenEmailWindow","setNewContact","handleCloseCreateDialog","handleCloseContactDrawer","concat","ContactList","handleChangePage","newPage","newSelected","n","selectedIndex","indexOf","handleOpenCreateDialog","charAt","CreateContactForm","_objectSpread","handleCreateContact","console","log","alert","Drawer","anchor","xs","sm","ContactDetails","handleOpenEmailWindow","handleOpenNoteDialog","NoteDialog","handleCloseNoteDialog","EmailWindow","handleCloseEmailWindow"],"sourceRoot":""}