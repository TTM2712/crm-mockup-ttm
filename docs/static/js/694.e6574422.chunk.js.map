{"version":3,"file":"static/js/694.e6574422.chunk.js","mappings":"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","sources":["pages/Assistant/index.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { Box, TextField, IconButton, Typography, Paper, Avatar, Button } from '@mui/material';\nimport SendIcon from '@mui/icons-material/Send';\nimport SmartToyIcon from '@mui/icons-material/SmartToy';\n\nimport CloseIcon from '@mui/icons-material/Close';\nimport { useNavigate } from 'react-router-dom';\n\n// Mock data for demo responses\nconst MOCK_RESPONSES: Record<string, string> = {\n  'Các deal chưa chốt': 'Đây là danh sách các deal chưa chốt của bạn trong tháng 7:\\n```\\n| Tên Deal | Khách hàng | Giá trị |\\n|----------|-------------|---------|\\n| Deal 1   | Công ty A   | 100M    |\\n| Deal 2   | Công ty B   | 80M     |\\n```',\n  'Tổng giá trị deal đã chốt': 'Tổng giá trị đã chốt của bạn trong tháng này là 377.043.143 ₫',\n  'Tạo nhắc việc cho Công ty B': 'Đã tạo nhắc việc cho Deal của Công ty B vào ngày mai. Bạn có muốn thêm ghi chú không?',\n  'Viết email cảm ơn khách hàng': 'Chào quý khách,\\n\\nCảm ơn anh/chị đã tin tưởng sử dụng dịch vụ của chúng tôi. Chúng tôi rất trân trọng sự hợp tác này...',\n};\n\nconst DEFAULT_SUGGESTIONS = [\n  'Các deal chưa chốt trong tháng này',\n  'Tổng giá trị deal đã chốt',\n  'Tạo nhắc việc cho Công ty B',\n  'Viết email cảm ơn khách hàng'\n];\n\ninterface Message {\n  id: number;\n  text: string;\n  isUser: boolean;\n  timestamp: Date;\n}\n\nconst AssistantPage: React.FC = () => {\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState<Message[]>([]);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const navigate = useNavigate();\n\n  // Initial bot greeting\n  useEffect(() => {\n    setMessages([\n      {\n        id: 1,\n        text: 'Xin chào! Tôi là trợ lý ảo của CRM. Tôi có thể giúp gì cho bạn?',\n        isUser: false,\n        timestamp: new Date(),\n      },\n    ]);\n  }, []);\n\n  // Auto-scroll to bottom of messages\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  const handleSendMessage = () => {\n    if (!input.trim()) return;\n\n    // Add user message\n    const userMessage: Message = {\n      id: Date.now(),\n      text: input,\n      isUser: true,\n      timestamp: new Date(),\n    };\n\n    setMessages((prev) => [...prev, userMessage]);\n    setInput('');\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botResponse: Message = {\n        id: Date.now() + 1,\n        text: MOCK_RESPONSES[input] || 'Xin lỗi, tôi chưa hiểu yêu cầu của bạn. Bạn có thể thử lại không?',\n        isUser: false,\n        timestamp: new Date(),\n      };\n      setMessages((prev) => [...prev, botResponse]);\n    }, 800);\n  };\n\n  const handleSuggestionClick = (suggestion: string) => {\n    setInput(suggestion);\n  };\n\n  const formatDate = (date: Date) => {\n    return new Intl.DateTimeFormat('vi-VN', {\n      hour: '2-digit',\n      minute: '2-digit',\n    }).format(date);\n  };\n\n  const renderMessageContent = (text: string) => {\n    if (text.includes('```')) {\n      const parts = text.split('```');\n      return (\n        <div>\n          {parts.map((part, index) => {\n            if (index % 2 === 1) {\n              // This is a code block\n              return (\n                <pre\n                  key={index}\n                  style={{\n                    backgroundColor: '#f5f5f5',\n                    padding: '10px',\n                    borderRadius: '4px',\n                    overflowX: 'auto',\n                    margin: '8px 0',\n                    fontFamily: 'monospace',\n                    whiteSpace: 'pre-wrap',\n                  }}\n                >\n                  {part.trim()}\n                </pre>\n              );\n            }\n            return <div key={index}>{part}</div>;\n          })}\n        </div>\n      );\n    }\n    return <div style={{ whiteSpace: 'pre-line' }}>{text}</div>;\n  };\n\n  return (\n    <Box sx={{ display: 'flex', flexDirection: 'column', height: '100vh' }}>\n      {/* Header */}\n      <Box\n        sx={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          p: 2,\n          borderBottom: '1px solid #e0e0e0',\n          backgroundColor: '#fff',\n        }}\n      >\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          <SmartToyIcon color=\"primary\" fontSize=\"large\" />\n          <Typography variant=\"h6\" component=\"h1\">\n            Trợ lý thông minh CRM ITV\n          </Typography>\n        </Box>\n        <IconButton onClick={() => navigate(-1)}>\n          <CloseIcon />\n        </IconButton>\n      </Box>\n\n      {/* Messages */}\n      <Box\n        sx={{\n          flex: 1,\n          overflowY: 'auto',\n          p: 2,\n          bgcolor: '#f9f9f9',\n        }}\n      >\n        {messages.map((message) => (\n          <Box\n            key={message.id}\n            sx={{\n              display: 'flex',\n              justifyContent: message.isUser ? 'flex-end' : 'flex-start',\n              mb: 2,\n            }}\n          >\n            <Box\n              sx={{\n                display: 'flex',\n                flexDirection: 'column',\n                maxWidth: '80%',\n              }}\n            >\n              <Box\n                sx={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  mb: 0.5,\n                  justifyContent: message.isUser ? 'flex-end' : 'flex-start',\n                }}\n              >\n                {!message.isUser && (\n                  <Avatar sx={{ width: 24, height: 24, mr: 1, bgcolor: 'primary.main' }}>\n                    <SmartToyIcon sx={{ fontSize: 16 }} />\n                  </Avatar>\n                )}\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  {message.isUser ? 'Bạn' : 'Trợ lý AI'} • {formatDate(message.timestamp)}\n                </Typography>\n              </Box>\n              <Paper\n                elevation={0}\n                sx={{\n                  p: 2,\n                  bgcolor: message.isUser ? 'primary.light' : 'background.paper',\n                  color: message.isUser ? 'primary.contrastText' : 'text.primary',\n                  borderRadius: 2,\n                  borderTopLeftRadius: message.isUser ? 12 : 2,\n                  borderTopRightRadius: message.isUser ? 2 : 12,\n                }}\n              >\n                {renderMessageContent(message.text)}\n              </Paper>\n            </Box>\n          </Box>\n        ))}\n        <div ref={messagesEndRef} />\n      </Box>\n\n      {/* Suggestions */}\n      {messages.length <= 1 && (\n        <Box sx={{ p: 2, borderTop: '1px solid #e0e0e0', bgcolor: '#fff' }}>\n          <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n            Bạn có thể hỏi:\n          </Typography>\n          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\n            {DEFAULT_SUGGESTIONS.map((suggestion, index) => (\n              <Button\n                key={index}\n                variant=\"outlined\"\n                size=\"small\"\n                onClick={() => handleSuggestionClick(suggestion)}\n                sx={{\n                  textTransform: 'none',\n                  borderRadius: 4,\n                  fontSize: '0.8rem',\n                }}\n              >\n                {suggestion}\n              </Button>\n            ))}\n          </Box>\n        </Box>\n      )}\n\n      {/* Input */}\n      <Box sx={{ p: 2, borderTop: '1px solid #e0e0e0', bgcolor: '#fff' }}>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            handleSendMessage();\n          }}\n        >\n          <Box sx={{ display: 'flex', gap: 1 }}>\n            <TextField\n              fullWidth\n              variant=\"outlined\"\n              placeholder=\"Nhập tin nhắn...\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyPress={(e) => {\n                if (e.key === 'Enter' && !e.shiftKey) {\n                  e.preventDefault();\n                  handleSendMessage();\n                }\n              }}\n              multiline\n              maxRows={4}\n              sx={{\n                '& .MuiOutlinedInput-root': {\n                  borderRadius: 4,\n                  backgroundColor: '#f5f5f5',\n                  '&:hover fieldset': {\n                    borderColor: 'primary.main',\n                  },\n                },\n              }}\n            />\n            <IconButton\n              type=\"submit\"\n              color=\"primary\"\n              sx={{\n                alignSelf: 'flex-end',\n                backgroundColor: 'primary.main',\n                color: 'white',\n                '&:hover': {\n                  backgroundColor: 'primary.dark',\n                },\n              }}\n              disabled={!input.trim()}\n            >\n              <SendIcon />\n            </IconButton>\n          </Box>\n        </form>\n      </Box>\n    </Box>\n  );\n};\n\nexport default AssistantPage;\n"],"names":["MOCK_RESPONSES","DEFAULT_SUGGESTIONS","AssistantPage","input","setInput","useState","messages","setMessages","messagesEndRef","useRef","navigate","useNavigate","useEffect","id","text","isUser","timestamp","Date","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","trim","userMessage","now","prev","setTimeout","botResponse","renderMessageContent","includes","parts","split","_jsx","children","map","part","index","style","backgroundColor","padding","borderRadius","overflowX","margin","fontFamily","whiteSpace","_jsxs","Box","sx","display","flexDirection","height","alignItems","justifyContent","p","borderBottom","gap","SmartToyIcon","color","fontSize","Typography","variant","component","IconButton","onClick","CloseIcon","flex","overflowY","bgcolor","message","mb","maxWidth","Avatar","width","mr","date","Intl","DateTimeFormat","hour","minute","format","Paper","elevation","borderTopLeftRadius","borderTopRightRadius","ref","length","borderTop","gutterBottom","flexWrap","suggestion","Button","size","handleSuggestionClick","textTransform","onSubmit","e","preventDefault","TextField","fullWidth","placeholder","value","onChange","target","onKeyPress","key","shiftKey","multiline","maxRows","borderColor","type","alignSelf","disabled","SendIcon"],"sourceRoot":""}